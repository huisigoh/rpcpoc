#!/usr/bin/env node

var fs = require('fs');
var path = require('path');

var Buffers = require('buffers');
var mkdirSync = require('mkdirp').sync;
var beautify = require("js-beautify").js_beautify;

var render = require('../index');

var n;
var buffers = new Buffers();
var sizes=[];
var start;
process.stdin.on('readable', function() {
    var chunk;
    while (null !== (chunk=process.stdin.read())) {
        if (n === undefined) {
            n = chunk.readUInt32LE(0) + 1;
            for (var i=0; i<n; ++i) {
                var size = 8*chunk.readUInt32LE(4*(i+1));
                sizes.push(size);
            }

            start = 4*n + (n%2 ? 4 : 8);
        }

        buffers.push(chunk);
    }
});

process.stdin.on('end', function() {
    var CGR = require('../lib/cgr/readers');
    var context = require('../lib/context');

    var segments = [];
    for (var i=0; i<sizes.length; ++i) {
        segments.push(new Buffer(buffers.slice(start, start+sizes[i])));
        start += sizes[i];
    }

    if (start !== buffers.length) {
        throw new Error('All data has not been included');
    }

    var Arena = require('capnp-js/reader/Arena');
    var arena = new Arena(segments, +Infinity, +Infinity);

    var request = CGR.CodeGeneratorRequest._deref(
        arena,
        {
            segment : arena.getSegment(0),
            position : 0
        },
        0
    );

    var trees = context(request.getRequestedFiles(), request.getNodes());

    var files = [
        'rTypes',
        'rScope',
        'readers',
        'bTypes',
        'bScope',
        'builders'
    ];

    trees.forEach(function (tree) {
        var dir = tree.name + '.d';

        if (fs.existsSync(dir)) {
            // Leave existing permissions unaltered.
            if (!(fs.statSync(dir).mode & 128)) {
                // No write permission exists on a pre-existing directory.
                process.stderr.write('Unwritable directory: ' + dir + '\n');
                return;
            }
        } else {
            // 111101101 (rx for all)
            mkdirSync(dir, 493);
        }

        files.forEach(function (file) {
            var filename = dir + '/' + file + '.js';
            render[file](tree).done(
                function (rendering) {
                    if (fs.existsSync(filename))
                        fs.unlinkSync(filename);

                    // 100100100 (r for all)
                    fs.writeFileSync(
                        filename,
                        beautify(rendering, {}),
                        { mode : 292 }
                    );
                },
                function (err) {
                    process.stderr.write('Dust rendering error: ' + err + '\n');
                }
            );
        });
    });
});
